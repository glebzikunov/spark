// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  CreatedCommunities Community[] @relation("CreatedBy")

  username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]

  Post Post[]
  Comment Comment[]
  CommentVote CommentVote[]
  Vote Vote[]
  Subscribption Subscribtion[]

}

model Community {
  id String @id @default(cuid())
  name String @unique
  image String?
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]

  creatorId String?
  Creator User? @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscribtion[]

  @@index([name])
}

model Subscribtion {
  user User @relation(fields: [userId], references: [id])
  userId String
  isModerator Boolean
  community Community @relation(fields: [communityId], references: [id])
  communityId String

  @@id([userId, communityId])
}

model Post {
  id String @id @default(cuid())
  title String
  content Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  community Community @relation(fields: [communityId], references: [id])
  communityId String

  author User @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes Vote[]
}

model Comment {
  id String @id @default(cuid())
  text String
  createdAt DateTime @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  post Post @relation(fields: [postId], references: [id])
  postId String

  replyToId String?
  replyTo Comment? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("ReplyTo")

  likes CommentVote[]
  commentId String?
}

enum VoteType {
  LIKE
  DISLIKE
}

model Vote {
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type VoteType

  @@id([userId, postId])
}

model CommentVote {
  user User @relation(fields: [userId], references: [id])
  userId String
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type VoteType 
  @@id([userId, commentId])
}